/*
Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.
*/

struct Fibonacci {
    curr: u64,
    next: u64,
}

impl Iterator for Fibonacci {
    type Item = u64;

    fn next(&mut self) -> Option<Self::Item> {
        let old_curr = self.curr;
        let new_next = self.curr + self.next;
        self.curr = self.next;
        self.next = new_next;
        Some(old_curr)
    }
}

impl Fibonacci {
    fn new() -> Self {
        Fibonacci { curr: 1, next: 2 }
    }
}

fn even(num: u64) -> bool {
    num % 2 == 0
}

fn solve(limit: u64) -> u64 {
    Fibonacci::new()
        .filter(|num| even(*num))
        .take_while(|num| *num < limit)
        .sum()
}

const LIMIT: u64 = 4_000_000;

fn main() {
    println!("{}", solve(LIMIT));
}
